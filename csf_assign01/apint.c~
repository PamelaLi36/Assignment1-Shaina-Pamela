/*
 * CSF Assignment 1
 * Arbitrary-precision integer data type
 * Function implementations
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <assert.h>
#include "apint.h"

ApInt *apint_create_from_u64(uint64_t val) {
  ApInt * new_apint = (ApInt*)malloc(sizeof(ApInt));
  new_apint->len = 1;
  new_apint->data = (uint64_t*)malloc(new_apint->len*sizeof(uint64_t));
  new_apint->data[0] = val;
  new_apint->isNegative = false;

  // assert(0);
  // return NULL;
  return new_apint;
}

ApInt *apint_create_from_hex(const char *hex) {
	/* TODO: implement */
	assert(0);
	return NULL;
}

void apint_destroy(ApInt *ap) {
  free(ap);
  //assert(0);
}

int apint_is_zero(const ApInt *ap) {
  if( ap->data[0] == 0 ) { return 1; }
  else { return 0; }

  //assert(0);
  //return 0;
}

int apint_is_negative(const ApInt *ap) {
  if( ap->isNegative ) { return 1; }
  else { return 0; }

  //assert(0);
  //return 0;
}

uint64_t apint_get_bits(const ApInt *ap, unsigned n) {
  return ap->data[n];
  //assert(0);
  //return 0UL;
}

int apint_highest_bit_set(const ApInt *ap) {
  uint64_t temp = ap->data[0];
  int hb = 0;

  if(temp == 0) {
    return -1;
  }

  for(int i = 0; i < 64; i++) {
    if(temp & 1 == 1) {
      hb = i;
    }
    temp >>=1;
  }

  return hb;
  //assert(0);
  //return -1;
}

char *apint_format_as_hex(const ApInt *ap) {
  uint64_t temp = ap->data[0];
  char store[17];
  char* storep = store;
  char *return_string = (char*)calloc(17, sizeof(char));
  int idx = 0;

  if( temp == 0 ) {
    *return_string = '0';
    *(return_string + 1) = '\0';
    return return_string;
  }
  
  while (temp != 0) {
    switch(temp % 16) {
    case 0 : *(storep + idx) = '0';
      break;
    case 1 : *(storep + idx) = '1';
      break;
    case 2 : *(storep + idx) = '2';
      break;
    case 3 : *(storep + idx) = '3';
      break;
    case 4 : *(storep + idx) = '4';
      break;
    case 5 : *(storep + idx) = '5';
      break;
    case 6 : *(storep + idx) = '6';
      break;
    case 7 : *(storep + idx) = '7';
      break;
    case 8 : *(storep + idx) = '8';
      break;
    case 9 : *(storep + idx) = '9';
      break;
    case 10 : *(storep + idx) = 'a';
      break;
    case 11 : *(storep + idx) = 'b';
      break;
    case 12 : *(storep + idx) = 'c';
      break;
    case 13 : *(storep + idx) = 'd';
      break;
    case 14 : *(storep + idx) = 'e';
      break;
    case 15 : *(storep + idx) = 'f';
      break;
    }
    idx++;
    temp = temp/16;
  }

  int i = 0;
  if ( ap->isNegative) {
    *(return_string + i) = '-';
    i++;
  }

  for(; i <= idx; i++) {
    *(return_string + i) = store[idx - i - 1];
  }

  *(return_string + i) = '\0';
  return return_string;
  //assert(0);
  //return NULL;
}

ApInt *apint_negate(const ApInt *ap) {
  ApInt * new_apint = (ApInt*)malloc(sizeof(ApInt));
  new_apint->data = ap->data;
  new_apint->len = ap->len;

  if( ap->isNegative ) {
    new_apint->isNegative = false;
  } else {
    new_apint->isNegative = true;
  }

  //assert(0);
  return new_apint;
}

ApInt *apint_add(const ApInt *a, const ApInt *b) {
  ApInt * new_apint = (ApInt*)malloc(sizeof(ApInt));
  new_apint->len = 1;
  new_apint->data = (uint64_t*)malloc(new_apint->len*sizeof(uint64_t));

  printf("this is a: %lu, and this is b: %lu\n", a->data[0], b->data[0]);
  if(a->isNegative && b->isNegative) {
    printf("both a & b are negative\n");
    new_apint->data[0] = addVal(a->data[0], b->data[0]);
    new_apint->isNegative = true;
  }
  else if(!(a->isNegative) && !(b->isNegative)) {
    printf("both a and b are positive\n");
    new_apint->data[0] = addVal(a->data[0], b->data[0]);
    new_apint->isNegative = false;
  }
  else {
    printf("either a or b is positive\n");
    if((a->isNegative) && (a->data[0] > b->data[0])) {
      new_apint->data[0] = subVal(a->data[0], b->data[0]);
      new_apint->isNegative = true;
    } else if((a->isNegative) && (b->data[0] >= a->data[0])) {
      new_apint->data[0] = subVal(b->data[0], a->data[0]);
      new_apint->isNegative = false;
    } else if((b->isNegative) && (b->data[0] > a->data[0])) {
      new_apint->data[0] = subVal(b->data[0], a->data[0]);
      new_apint->isNegative = true;
    } else if((b->isNegative) && (a->data[0] >= b->data[0])) {
      new_apint->data[0] = subVal(a->data[0], b->data[0]);
      new_apint->isNegative = false;
    }
  }

  printf("returning this value: %lu\n", new_apint->data[0]);
  return new_apint;
  //assert(0);
  //return NULL;
}


ApInt *apint_sub(const ApInt *a, const ApInt *b) {
  ApInt * new_apint = (ApInt*)malloc(sizeof(ApInt));
  new_apint->len = 1;
  new_apint->data = (uint64_t*)malloc(new_apint->len*sizeof(uint64_t));
  new_apint->isNegative = false;
  //new_apint->data[0] = subVal(a->data[0], b->data[0]);

  printf("\n substracting \n");
  printf("this is a: %lu, and this is b: %lu\n", a->data[0], b->data[0]);
  if(!(a->isNegative) && !(b->isNegative)) {
     printf("both a & b are positive\n");
    if(a->data[0] >= b->data[0] ) {
      new_apint->data[0] = subVal(a->data[0], b->data[0]);
      new_apint->isNegative = false;
    } else {
      new_apint->data[0] = subVal(b->data[0], a->data[0]);
      new_apint->isNegative = true;
    }
  }
  else if(a->isNegative && b->isNegative) {
    printf("both a & b are negative\n");
    if(a->data[0] > b->data[0] ) {
      new_apint->data[0] = subVal(a->data[0], b->data[0]);
      new_apint->isNegative = true;
    } else {
      new_apint->data[0] = subVal(b->data[0], a->data[0]);
      new_apint->isNegative = false;
    }
  }
  else {
     printf("either a or b is negative\n");
    new_apint->data[0] = addVal(a->data[0], b->data[0]);

    if(a->isNegative) { new_apint->isNegative = true; }
    else { new_apint->isNegative = false; }
  }

  printf("returning this value: %lu\n", new_apint->data[0]);
  return new_apint;
  //assert(0);
  //return NULL;
}

int apint_compare(const ApInt *left, const ApInt *right) {
  if( !(left->isNegative) && !(right->isNegative) ) {
    if(left->data[0] > right->data[0]) { return 1; }
    else if(left->data[0] < right->data[0]) { return -1; }
    else { return 0; }
  }
  else if (left->isNegative && right->isNegative) {
    if(left->data[0] > right->data[0]) { return -1; }
    else if(left->data[0] < right->data[0]) { return 1; }
    else { return 0; }
  }
  else {
    if(left->isNegative) {return -1; }
    else { return 1; }
  }
	//assert(0);
	//return 0;
}


//helper function
uint64_t addVal(uint64_t a, uint64_t b) { return a + b; }
uint64_t subVal(uint64_t a, uint64_t b) { return a - b; }
